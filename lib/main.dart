import 'package:flutter/material.dart';
import './widgets/webview.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import '/firebase_options.dart'; // this file is generated by "flutterfire config" command
import 'package:firebase_messaging/firebase_messaging.dart';
import 'dart:io';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:notification_permissions/notification_permissions.dart';

final navigatorKey = GlobalKey<NavigatorState>();

Future<String> _getId() async {
  DeviceInfoPlugin deviceInfo = DeviceInfoPlugin();
  if (Platform.isIOS) {
    IosDeviceInfo iosInfo = await deviceInfo.iosInfo;
    return iosInfo.identifierForVendor ?? ''; // puede ser null
  } else if (Platform.isAndroid) {
    AndroidDeviceInfo androidInfo = await deviceInfo.androidInfo;
    return androidInfo.id; // Usar 'id' en lugar de 'androidId' o 'serialNumber'
  } else {
    return 'Unknown';
  }
}

Future<PermissionStatus> requestNotificationPermissions() async {
  Future<PermissionStatus> permissionStatus =
      NotificationPermissions.getNotificationPermissionStatus();

  return permissionStatus;
}

Future main() async {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: [
    SystemUiOverlay.bottom, //This line is used for showing the bottom bar
  ]);

  String initialUrl = '';

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  FirebaseMessaging messaging = FirebaseMessaging.instance;

  messaging.setAutoInitEnabled(true);

  await messaging.requestPermission(
    alert: true,
    announcement: true,
    badge: true,
    carPlay: false,
    criticalAlert: true,
    provisional: false,
    sound: true,
  );
  await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(
    alert: true, // Required to display a heads up notification
    badge: true,
    sound: true,
  );

  final firebaseToken = await messaging.getToken();
  print('FCMToken $firebaseToken');

  final deviceUid = await _getId();
  print('DeviceUID $deviceUid');

  final bool notificationsEnabled = (await requestNotificationPermissions()) == PermissionStatus.granted;
  print('notificationsEnabled $notificationsEnabled');

  runApp(MyApp(
    firebaseToken: firebaseToken ?? '',
    deviceUid: deviceUid,
    initialUrl: initialUrl,
    notificationsEnabled: notificationsEnabled
  ));
}

class MyApp extends StatefulWidget {
  final String initialUrl, deviceUid, firebaseToken;
  final bool notificationsEnabled;

  const MyApp({
    super.key,
    required this.initialUrl,
    required this.deviceUid,
    required this.firebaseToken,
    required this.notificationsEnabled
  });

  @override
  MyAppState createState() => MyAppState();
}

class MyAppState extends State<MyApp> {
  String initialUrl = '';

  void handleMessage(RemoteMessage message) {
    const androidPlatformChannelSpecifics = AndroidNotificationDetails('smily', 'Smily', importance: Importance.high, priority: Priority.high);

    const platformChannelSpecifics = NotificationDetails(android: androidPlatformChannelSpecifics);
    final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();
    flutterLocalNotificationsPlugin.show(
        0, 'prueba', 'body', platformChannelSpecifics);

    try {
      if (message.data['booking_url'] != null && message.data['booking_url'].isNotEmpty) {
        initialUrl = message.data['booking_url'];

        setState(() {
          initialUrl = message.data['booking_url'];
        });
      } else {

      }
    } catch (e) {
      print('Error handling background message: $e');
      print(message);
    }
  }

  @pragma('vm:entry-point')
  Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
    await Firebase.initializeApp();
    handleMessage(message);
  }

  Future<void> setupInteractedMessage() async {
    RemoteMessage? initialMessage =
        await FirebaseMessaging.instance.getInitialMessage();

    if (initialMessage != null) {
      handleMessage(initialMessage);
    }

    FirebaseMessaging.onMessageOpenedApp.listen(handleMessage);
  }

  @override
  void initState() {
    super.initState();

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      handleMessage(message);
    });
    FirebaseMessaging.onMessageOpenedApp.listen(handleMessage);
    setupInteractedMessage();
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  }

  @override
  Widget build(BuildContext context) {
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: [SystemUiOverlay.top]);

    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Smily',
      theme: ThemeData(
        fontFamily: 'Opensans',
      ),
      home: SmilyWebView(
        initialUrl: initialUrl,
        deviceUid: widget.deviceUid,
        firebaseToken: widget.firebaseToken,
        notificationsEnabled: widget.notificationsEnabled),
      navigatorKey: navigatorKey,
    );
  }
}
